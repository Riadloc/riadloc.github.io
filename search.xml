<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>理解Promise</title>
      <link href="/182021/"/>
      <url>/182021/</url>
      
        <content type="html"><![CDATA[<h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><ol><li>单线程；异步：嵌套调用 、错误处理trycatch；时间循环&amp;消息队列，任务优先级：渲染、网络请求、脚本任务：宏任务微任务；</li><li>解决了：链式调用，集中的catch，微任务高优先级</li></ol><h2 id="使用的具体场景"><a href="#使用的具体场景" class="headerlink" title="使用的具体场景"></a>使用的具体场景</h2><ol><li>node库、dom api、axios等网络库</li><li>async await等es 7的新特性</li><li>等等</li></ol><h2 id="Promise-A-规范"><a href="#Promise-A-规范" class="headerlink" title="Promise/A+规范"></a>Promise/A+规范</h2><p>一个开放、健全且通用的JavaScript Promise标准<br /><a href="https://promisesaplus.com/">英文原文地址</a><br /><a href="https://www.ituring.com.cn/article/66566">中文翻译</a></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> STATUS = &#123;</span><br><span class="line">  <span class="attr">PENDING</span>: <span class="string">&#x27;pending&#x27;</span>,</span><br><span class="line">  <span class="attr">FULFILLED</span>: <span class="string">&#x27;fulfilled&#x27;</span>,</span><br><span class="line">  <span class="attr">REJECTED</span>: <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isFunction = <span class="function">(<span class="params">obj</span>) =&gt;</span> <span class="keyword">typeof</span> obj === <span class="string">&#x27;function&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> isObject = <span class="function">(<span class="params">obj</span>) =&gt;</span> <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (promise === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;xxxx&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (x <span class="keyword">instanceof</span> MPromise) &#123;</span><br><span class="line">    <span class="keyword">return</span> x.then(<span class="function"><span class="params">y</span> =&gt;</span> &#123;</span><br><span class="line">      resolvePromise(promise, y, resolve, reject)</span><br><span class="line">    &#125;, reject)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isObject(x) || isFunction(x)) &#123;</span><br><span class="line">    <span class="keyword">let</span> then = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      then = x.then;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">return</span> reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (isFunction(then)) &#123;</span><br><span class="line">      <span class="keyword">let</span> called = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        then.call(</span><br><span class="line">          x,</span><br><span class="line">          <span class="function"><span class="keyword">function</span> <span class="title">_resolvePromise</span>(<span class="params">y</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">            called = <span class="literal">true</span>;</span><br><span class="line">            resolvePromise(promise, y, resolve, reject);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="keyword">function</span> <span class="title">_rejectPromise</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">            called = <span class="literal">true</span>;</span><br><span class="line">            reject(r);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">        reject(error);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resolve(x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resolve(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MPromise</span> </span>&#123;</span><br><span class="line">  _status = STATUS.PENDING;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.status = STATUS.PENDING</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.FULFILLED_CALLBACK_LIST = [];</span><br><span class="line">    <span class="built_in">this</span>.REJECTED_CALLBACK_LIST = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      fn(<span class="built_in">this</span>.resolve.bind(<span class="built_in">this</span>), <span class="built_in">this</span>.reject.bind(<span class="built_in">this</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">      <span class="built_in">this</span>.reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title">status</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._status;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title">status</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._status = value;</span><br><span class="line">    <span class="keyword">switch</span>(value) &#123;</span><br><span class="line">      <span class="keyword">case</span> STATUS.FULFILLED:</span><br><span class="line">        <span class="built_in">this</span>.FULFILLED_CALLBACK_LIST.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> cb(<span class="built_in">this</span>.value));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> STATUS.REJECTED:</span><br><span class="line">        <span class="built_in">this</span>.REJECTED_CALLBACK_LIST.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> cb(<span class="built_in">this</span>.reason));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">resolve</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.status === STATUS.PENDING) &#123;</span><br><span class="line">      <span class="built_in">this</span>.status = STATUS.FULFILLED</span><br><span class="line">      <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">reject</span>(<span class="params">reason</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.status === STATUS.PENDING) &#123;</span><br><span class="line">      <span class="built_in">this</span>.status = STATUS.REJECTED</span><br><span class="line">      <span class="built_in">this</span>.reason = reason;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">fulfilled, rejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> onFulfilled = isFunction(fulfilled) ? fulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">    <span class="keyword">let</span> onRejected = isFunction(rejected) ? fulfilled : <span class="function"><span class="params">reason</span> =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> fulfilledFn = <span class="function">(<span class="params">promise1, resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!isFunction(fulfilled)) &#123;</span><br><span class="line">            resolve(<span class="built_in">this</span>.value);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">            resolvePromise(promise1, x, resolve, reject)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          reject(error);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> rejectedFn = <span class="function">(<span class="params">promise1, resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!isFunction(rejected)) &#123;</span><br><span class="line">            reject(<span class="built_in">this</span>.reason);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">            resolvePromise(promise1, x, resolve, reject)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          reject(error);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(<span class="built_in">this</span>.status) &#123;</span><br><span class="line">      <span class="keyword">case</span> STATUS.FULFILLED: &#123;</span><br><span class="line">        <span class="keyword">const</span> promise1 = <span class="keyword">new</span> MPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> fulfilledFn(promise1, resolve, reject));</span><br><span class="line">        <span class="keyword">return</span> promise1;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> STATUS.REJECTED: &#123;</span><br><span class="line">        <span class="keyword">const</span> promise1 = <span class="keyword">new</span> MPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> rejectedFn(promise1, resolve, reject));</span><br><span class="line">        <span class="keyword">return</span> promise1;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> STATUS.PENDING: &#123;</span><br><span class="line">        <span class="keyword">const</span> promise1 = <span class="keyword">new</span> MPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.FULFILLED_CALLBACK_LIST.push(<span class="function">() =&gt;</span> fulfilledFn(promise1, resolve, reject));</span><br><span class="line">          <span class="built_in">this</span>.REJECTED_CALLBACK_LIST.push(<span class="function">() =&gt;</span> rejectedFn(promise1, resolve, reject));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> promise1;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">    <span class="built_in">this</span>.then(<span class="literal">null</span>, onRejected);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">race</span>(<span class="params">promises</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (promises.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> resolve();</span><br><span class="line">      &#125;</span><br><span class="line">      promises.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> MPromise.resolve(cb).then(resolve, reject));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">all</span>(<span class="params">promises</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (promises.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> resolve();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> res = [];</span><br><span class="line">      <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> cb = promises[i];</span><br><span class="line">        MPromise.resolve(cb)</span><br><span class="line">          .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            res[i] = value;</span><br><span class="line">            <span class="keyword">if</span> (++count === promises.length) &#123;</span><br><span class="line">              resolve(res);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            reject(reason)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">resolve</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(value));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">reject</span>(<span class="params">reason</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MPromise(<span class="function">(<span class="params">_, reject</span>) =&gt;</span> reject(reason));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSONP原理及简单实现</title>
      <link href="/202017/"/>
      <url>/202017/</url>
      
        <content type="html"><![CDATA[<h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>JSONP全称 JSON with Padding，用于解决跨域问题的一种方案。<br>由于同源策略的限制，浏览器只允许XmlHttpRequest请求同源（域名、协议、端口相同）的资源，而对与请求script脚本资源却没有限制。通过包裹script标签来实现跨域请求，然后在服务端获取JSON数据并执行回调函数，这种跨域请求的方法被称为JSONP。<br><span id="more"></span></p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ol><li>首先在客户端注册一个callback方法，放到window对象上，如：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">callbackFunction (json) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>然后把callback的名字（callbackFunction）传给服务器。</li><li>服务器先生成 JOSN 数据。</li><li>将 JOSN 数据直接以入参的方式，放置到 function 中，这样就生成了一段 js 语法的文档（如callbackFunction(JOSN)），返回给客户端。</li><li>客户端浏览器，将返回的JS标签插入DOM，解析script标签后，会执行callbackFunction(JOSN)。<br>通过这种方式，即可实现跨域获取数据。<h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; JSONP &#125; <span class="keyword">from</span> <span class="string">&#x27;./JSONP&#x27;</span></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">JSONP(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;url&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;  </span><br><span class="line">    <span class="attr">key1</span>: <span class="string">&#x27;key1&#x27;</span>  </span><br><span class="line">  &#125;,  </span><br><span class="line">  callback (data) &#123;  </span><br><span class="line">    <span class="comment">// data 是服务端返回的数据  </span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSONP.js</span></span><br><span class="line"><span class="keyword">let</span> JSONP = <span class="function">(<span class="params">config = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; data, url, callback &#125; = config</span><br><span class="line">  <span class="comment">// 拼接请求Url</span></span><br><span class="line">  <span class="keyword">if</span> (!url) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;url is required!&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">`id_<span class="subst">$&#123;(<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()&#125;</span>_<span class="subst">$&#123;<span class="built_in">Math</span>.random().toString().substr(<span class="number">2</span>)&#125;</span>`</span></span><br><span class="line">  <span class="keyword">let</span> srcUrl = getSrcUrl(url, &#123;</span><br><span class="line">    data,</span><br><span class="line">    <span class="attr">callback</span>: name</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 插入Script标签</span></span><br><span class="line">  <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">  script.type = <span class="string">&#x27;text/javascript&#x27;</span></span><br><span class="line">  script.src = srcUrl</span><br><span class="line">  script.id = name</span><br><span class="line">  <span class="comment">// CallBack 放到 window 对象，调用后销毁</span></span><br><span class="line">  <span class="built_in">window</span>[name] = <span class="function"><span class="keyword">function</span> (<span class="params">json</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 执行这个函数后，要销毁这个函数</span></span><br><span class="line">    <span class="built_in">window</span>[name] = <span class="literal">undefined</span></span><br><span class="line">    <span class="comment">// 获取这个script的元素</span></span><br><span class="line">    <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(name)</span><br><span class="line">    <span class="comment">// 删除head里面插入的script，这三步都是为了不影响污染整个DOM啊</span></span><br><span class="line">    removeElem(elem)</span><br><span class="line">    <span class="comment">// 执行传入的的函数</span></span><br><span class="line">    callback &amp;&amp; <span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span> &amp;&amp; callback(json)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;head&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (head &amp;&amp; head[<span class="number">0</span>]) &#123;</span><br><span class="line">    head[<span class="number">0</span>].appendChild(script)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> getSrcUrl = <span class="function">(<span class="params">url, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> _url = url + (url.indexOf(<span class="string">&#x27;?&#x27;</span>) === -<span class="number">1</span> ? <span class="string">&#x27;?&#x27;</span> : <span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> ret = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    ret = data</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">      ret += <span class="string">&#x27;&amp;&#x27;</span> + key + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(data[key])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ret = ret.substr(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> _url + ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> removeElem = <span class="function">(<span class="params">elem</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> parent = elem.parentNode</span><br><span class="line">  <span class="keyword">if</span> (parent &amp;&amp; parent.nodeType !== <span class="number">11</span>) &#123;</span><br><span class="line">    parent.removeChild(elem)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> JSONP</span><br></pre></td></tr></table></figure><h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2></li><li>在 jquery 中，JSOP 被封装在 $.ajax() 方法中，但是他的实现原理与 ajax 完全不同。</li><li>JSONP的兼容性较好，在更加古老的浏览器中都可以运行，不需要XMLHttpRequest或ActiveX的支持。</li><li>JSONP只支持GET请求而不支持POST等其它类型的HTTP请求。</li><li>JSONP在调用失败的时候不会返回各种HTTP状态码（解决方法：添加timeout参数，虽然JSONP请求本身的错误没有被捕获，但是最终会因为超时而执行error回调）。</li><li>在使用JSONP的时候必须要保证使用的JSONP服务必须是安全可信的。若提供JSONP的服务存在页面注入漏洞，它返回的javascript都将被执行，这是非常危险的。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统使用闪讯校园网</title>
      <link href="/282017/"/>
      <url>/282017/</url>
      
        <content type="html"><![CDATA[<h3 id="linux下使用闪讯校园网"><a href="#linux下使用闪讯校园网" class="headerlink" title="linux下使用闪讯校园网"></a>linux下使用闪讯校园网</h3><p>最近安装了manjaro，发现linux下没有闪讯客户端，用室友的wifi也不太合适，搜了几页百度都没找到合适的方法，最常用的方式无非是在linux下安装虚拟机，再装个windows系统，感觉有点蠢，以前也尝试在deepin下用crossover也不成功。最后在知乎发现了蛛丝马迹。<br><span id="more"></span></p><p><img src="http://blog-1253493520.cossh.myqcloud.com/images/Screenshot_20170428_221512.png" alt="知乎"></p><p><a href="https://www.zhihu.com/question/19849426">知乎  -  Ubuntu 怎样连接闪讯？</a></p><p>根据上图老哥的回复，我觉得这个答主的脚本没准儿有用，事实果真如此。</p><hr><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>进入这位老哥给的git仓库地址<a href="https://github.com/Elrori/shanxun_pppoe_linux_desktop">https://github.com/Elrori/shanxun_pppoe_linux_desktop</a><br>嗯，他的readme还是很详细的，我来用我的小白逻辑向各位讲解一下。</p><ol><li>打开terminal终端，cd一个文件夹进去，输入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/Elrori/shanxun_pppoe_linux_desktop</span><br></pre></td></tr></table></figure>好，这个工程被你clone下来了</li><li>安装ppp这个软件包，可能很多linux发行版一开始就自动安装了这个软件包，比如我用的manjaro，没装的执行如下指令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -S ppp</span><br></pre></td></tr></table></figure>当然arch类的linux是用pacman这个安装指令。</li><li>用文本编辑器（kate/vim等）打开makefile文件，如下图<br><img src="http://blog-1253493520.cossh.myqcloud.com/images/Screenshot_20170428_224815.png" alt="makefile"><br>查找你gcc的具体路径<code>whereis gcc</code>，默认是在/usr/bin/gcc。接着确定pppd的版本，在终端输入<code>pppd --version</code>查看版本，作相应修改。</li><li>接着打开install文件，如下图<br><img src="http://blog-1253493520.cossh.myqcloud.com/images/Screenshot_20170428_225410.png" alt="install"><br><code>make $1 #make .so</code>这一行是根据你连接时输入的地区模块相应编译，但是我们图个简便，在install里新建一个变量<code>region=zhejiang_xiaoyuan_sxplugin</code>，我是浙江地区的闪讯（提供算法的老哥也是HDU的啊），其他地区根据makefile文件里的地区作相应修改，然后在echo那里把<code>$&#123;1&#125;.so</code>替换成<code>$&#123;region&#125;.so</code>，这样就可以了。接下来<code>ETH</code>这一行是确定你的有线网卡名字，由于现在网卡的命名规范变了可能不是以前eth开头的了，他这行指令可能获取不到正确的网卡名字。<code>ifconfig</code>现在不建议使用了，有更强大的<code>ip</code>指令。但是我们还是要下载一个包含<code>ifconfig、route</code>的软件包<code>net-tools</code>。我们在终端输入<code>ifconfig</code>,然后终端会显示你的所有网卡信息，e开头的是你的有线网卡，复制下来，粘贴替换到<code>ETH=</code>，如<code>ETH=enp4s0f2</code>。</li></ol><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>终端执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod a+x INSTALL</span><br><span class="line">sudo ./INSTALL</span><br></pre></td></tr></table></figure><br>就编译安装完成了</p><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p> <strong> 连接： </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo connect_sx &lt;username&gt; &lt;password&gt; </span><br></pre></td></tr></table></figure><br>例如：<code>sudo connect_sx 18166666666@DZKD.XY 123456</code> 即可连上闪讯；再一次连接使用上一次帐号密码直接执行 <code>sudo connect_sx</code> ; 更换密码 <code>sudo connect_sx &lt;password&gt;</code></p><p><strong> 断开连接： </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo connect_sx stop</span><br></pre></td></tr></table></figure></p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>感谢<a href="https://github.com/Elrori">Elrori</a>提供脚本！</p><p>感谢<a href="https://github.com/miao1007/Openwrt-NetKeeper">Leon</a>提供的项目源码！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php返回json数据前面诡异的小红点</title>
      <link href="/092017/"/>
      <url>/092017/</url>
      
        <content type="html"><![CDATA[<p>　　震惊！通过php返回的json数据竟然出现了这个，程序员看了都沉默了！<br><span id="more"></span></p><h3 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h3><p>　　url直连php，json数组还能在网页上显示的好好地，在ajax上就出大问题了，response.data返回的竟然是string而不是想要的object。好嘛，不太在意，以为php向前台发送数据本来就是这样的。然后通过JSON.parse()方法想将json字符串转为json对象数组，特么的又出错了，错误如下：</p><p><img src="http://ww1.sinaimg.cn/large/b12dc344gy1fdh26dbge1j20ex035wee" alt="&gt; Unexpected token in JSON at position 2"></p><p>　　网上搜索了一下，他们出现的问题都是 Unexpected token in JSON at position 0，咦，为啥我的出错位置和他们不一样呢？然后分析了一波，把方向转移到我得到的字符串格式有问题，不是严格的JSON字符串格式（JSON.parse()需要）。仔细观察了得到的json字符串一番，发现　　</p><ol><li>第一行有个换行符，妈的，不仔细看看不出来。。。</li><li>/符号前面加了转移符号\，如”http://“变成了”http:\/\/“，怎么看怎么别扭</li></ol><p>然后我通过如下代码</p><pre><code>let temp = response.data.replace(/\\/g, &apos;&apos;);temp = temp.replace(/\r\n/g, &apos;&apos;);goods = JSON.parse(temp)；</code></pre><p>成功去掉了换行符和转义符。我以为这样就大功告成了，不禁心里窃喜，打开网页刷新看console，哇塞，咋个还不行呢，出错问题还变了，变成了<code>Unexpected token in JSON at position 1</code>。这下我可没辙了，字符串1这个位置没啥特别的。突然我灵机一动，打开了控制台的network，点进获取的php，哇，I got you! son of bitchs!!!<br><img src="http://ww1.sinaimg.cn/large/b12dc344gy1fdh2899htaj20ib069mx2" alt="red node"><br>哦，在这停顿，鼠标移到红点上面显示\ufeff，赶紧百度一番，顿时发现问题所在和解决方法。</p><h3 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h3><p>\ufeff是个BOM字符，平常你是发现不到他的，因为在一般的文本编辑器里，如自带的记事本这个字符是隐形的。它经常会出现在utf-8+BOM编码的文本里面。。</p><p>BOM（Byte Order Mark）是一个字节顺序标签，类似一个标记，又叫签名，用来告诉编辑器当前文件采用何种编码，方便编辑器识别。除了unicode编码，一般的编码集并不会出现bom头。对于utf-16和utf-32，如果不指定bom头，解析程序就默认为ansi编码，从而出现乱码；而对于utf-8，BOM头指定与否，解析程序都可判断。<br>现在几乎所有的文本编辑软件都可以显示并编辑UTF-8编码的文件，但其中很多的表现并不理想。类似WINDOWS自带的记事本等软件，在保存一个以UTF-8编码的文件时，会在文件开始的地方插入三个不可见的字符0xEF、0xBB和0xBF，即BOM。对于一般的文件，这样做并不会产生麻烦。但对于 PHP来说，BOM是个大麻烦。因为PHP并不会忽略BOM，所以在读取、包含或者引用这些文件时，会把BOM作为该文件开头正文的一部分。同时根据嵌入式语言的特点，这串字符最终将被直接执行（显示）出来。</p><p>回到我们的问题中，由于有个配置文件在开发时用WINDOWS自带的记事本编辑保存过，导致这个文件在开头加入了BOM头，而这个配置文件在各个php接口脚本中都被读取过，从而导致接口输出的json格式数据前面多了BOM头。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>在sublime text3或者notepad++里把php的编码转成utf-8无BOM编码就行了，我的转换过后文件头出现了空行，赶紧删除，哈哈，大功告成了。</p><p>最后惊喜的发现response.data直接就是Object了，感动！</p><p><img src="http://ww1.sinaimg.cn/large/b12dc344gy1fdhn5e487nj20ew0a71gs" alt="json object"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>后台老哥你可长点心吧，以后别用记事本写php代码可好？</p>]]></content>
      
      
      
        <tags>
            
            <tag> 后台 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回首2016</title>
      <link href="/312016/"/>
      <url>/312016/</url>
      
        <content type="html"><![CDATA[<p>再见了2016，你好2017！<br><span id="more"></span><br><img src="http://ww2.sinaimg.cn/large/b12dc344gw1fbadpzuh9zj20qo0gotag.jpg" alt="2017"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LL(1)语法分析</title>
      <link href="/272016/"/>
      <url>/272016/</url>
      
        <content type="html"><![CDATA[<p>这个实验难点主要在求文法的FIRST集合FOLLOW集，求得后预测分析表的构建与符号串的分析就容易得多。<br><span id="more"></span></p><h3 id="1-算法流程"><a href="#1-算法流程" class="headerlink" title="1.算法流程"></a>1.算法流程</h3><p><strong>1.1求FIRST集</strong><br>（1）如果产生式右部第一个字符为终结符，则将其计入左部first集<br>（2）如果产生式右部为&amp;（空），加入左部first集<br>（3）如果产生式右部第一个字符为非终结符，则加入该非终结符的first集（递归（1）（2）（3））。<br>（4）求得所有非终结符的first集结束。</p><p><strong>1.2求FOLLOW集</strong><br>对于文法G中每个非终结符A构造FOLLOW(A)的办法是,连续使用下面的规则,直到每个FOLLOW不在增大为止.<br>(1) 对于文法的开始符号S,置$于FOLLOW(S)中;<br>(2) 若A-&gt;aBb是一个产生式,则把FIRST(b){ε}加至FOLLOW(B)中;<br>(3) 若A-&gt;aB是一个产生式,或A-&gt;aBb是一个产生式而b=&gt;ε(即ε∈FIRST(b))则把FOLLOW(A)加至FOLLOW(B)中</p><p><strong>1.3生成预测分析表</strong><br>(1) 对文法G的每个产生式A-&gt;αBβ执行（2）和（3）;<br>(2) 对每个终结符a∈FIRST(a),把产生式A-&gt;a在数组List中的下标i增加1加至M[A][a]中;<br>(3) 若ε∈FIRST(αBβ),则把对b∈FOLLOW(A)，把A-&gt;αBβ加至M[A][b]中;<br>(4) 把所有无定义的M[A][a]加入0.</p><p><strong>1.4 对符号串的分析过程</strong><br>(1) 若X=a=”$”,则宣布分析成功,停止分析过程.<br>(2) 若X=a≠”$”,则把X从STACK栈顶逐出,让a指向下一个输入符号.<br>(3) 若X是一个非终结符,则查看分析表M,若M[A,a]中存放着存放着关于X的一个产生式List[i-1],那么,首先把X逐出STACK栈顶,然后把产生式的右部符号串按反序一一压入STACK栈(若右部符号为ε,则不压进栈)。重复执行（1）（2）（3）。若M[A][a]中存放着数字0,则打印出错，退出。</p><h3 id="2-测试"><a href="#2-测试" class="headerlink" title="2. 测试"></a>2. 测试</h3><p><em>输入：</em><br><img src="http://ww3.sinaimg.cn/large/b12dc344gw1fb4axzd6t3j20gc08xglu.jpg" alt="输入"><br><em>输出：</em><br><img src="http://ww3.sinaimg.cn/large/b12dc344gw1fb4ayte56xj20dn0nkabg.jpg" alt="输出"></p><h3 id="3-数据结构"><a href="#3-数据结构" class="headerlink" title="3.数据结构"></a>3.数据结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String head;</span><br><span class="line">    <span class="keyword">private</span> String tail;</span><br><span class="line">    <span class="keyword">private</span> String first = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//存储每个非终结符的FIRST和FOLLOW集的数据结构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Analyse</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String node;</span><br><span class="line">    <span class="keyword">private</span> String first = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String follw = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-源代码"><a href="#4-源代码" class="headerlink" title="4.源代码"></a>4.源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">All</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String sign = <span class="string">&quot;i+*()$&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> String node;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> len;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> String <span class="title">space</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">        String str = <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            str+=<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String head;</span><br><span class="line">    <span class="keyword">private</span> String tail;</span><br><span class="line">    <span class="keyword">private</span> String first = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFollow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> follow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFollow</span><span class="params">(String follow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.follow = follow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String follow = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirst</span><span class="params">(String first)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first += first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    Edge(<span class="keyword">int</span> len)&#123;</span><br><span class="line">        <span class="keyword">this</span>.len=len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHead</span><span class="params">(String head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.head = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTail</span><span class="params">(String tail)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tail = tail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Analyse</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String node;</span><br><span class="line">    <span class="keyword">private</span> String first = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String follw = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFollw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> follw;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFollw</span><span class="params">(String follw)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.follw = follw;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNode</span><span class="params">(String node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.node = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirst</span><span class="params">(String first)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first += first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">search</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Edge&gt; <span class="title">find</span><span class="params">(ArrayList&lt;Edge&gt; list,<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Edge&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(list.get(i).getHead().charAt(<span class="number">0</span>)==ch)</span><br><span class="line">                list1.add(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Edge&gt; <span class="title">findtail</span><span class="params">(ArrayList&lt;Edge&gt; list,String ch)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Edge&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//System.out.println(&quot;ch&quot;+ch);</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(list.get(i).getTail().contains(ch))</span><br><span class="line">                list1.add(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">findFi</span><span class="params">(ArrayList&lt;Analyse&gt; list,String ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(list.get(i).getNode().equals(ch))</span><br><span class="line">                <span class="keyword">return</span> list.get(i).getFirst();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">sign</span><span class="params">(ArrayList&lt;Edge&gt; list,String ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(list.get(i).getHead().equals(ch)&amp;&amp;list.get(i).getTail().equals(<span class="string">&quot;&amp;&quot;</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fi</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">first</span><span class="params">(ArrayList&lt;Edge&gt; list, Edge edge)</span></span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(All.sign.contains(edge.getTail().substring(<span class="number">0</span>,<span class="number">1</span>)))&#123;</span><br><span class="line">            str+=edge.getTail().substring(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(edge.getTail().equals(<span class="string">&quot;&amp;&quot;</span>))&#123;</span><br><span class="line">            str+=<span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;edge.len;i++) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> sign = <span class="keyword">true</span>;</span><br><span class="line">                ArrayList&lt;Edge&gt; list1 = search.find(list,edge.getTail().charAt(i));</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;list1.size();j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!Fi.first(list,list1.get(j)).equals(<span class="string">&quot;&amp;&quot;</span>))</span><br><span class="line">                        str+=Fi.first(list,list1.get(j));</span><br><span class="line">                    <span class="keyword">else</span> sign = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(sign)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">follow</span><span class="params">(ArrayList&lt;Edge&gt; list, Edge edge,ArrayList&lt;Analyse&gt; analyses)</span></span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        ArrayList&lt;Edge&gt; list1 = search.findtail(list,edge.getHead());</span><br><span class="line">        <span class="keyword">if</span>(edge == list.get(<span class="number">0</span>))&#123;</span><br><span class="line">            str+=<span class="string">&quot;$&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list1.size();i++)&#123;</span><br><span class="line">            String str1 = list1.get(i).getTail().substring(list1.get(i).getTail().indexOf(edge.getHead())+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(!str1.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">                <span class="comment">//System.out.println(&quot;hello&quot;);</span></span><br><span class="line">                <span class="keyword">if</span>(All.sign.contains(str1))&#123;</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;world&quot;);</span></span><br><span class="line">                    <span class="keyword">if</span>(!str.contains(str1))</span><br><span class="line">                    &#123;str+=str1;<span class="keyword">break</span>;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">                str+=search.findFi(analyses,str1).replace(<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(search.sign(list,str1))&#123;</span><br><span class="line">                    String string = Fo.follow(list,list1.get(i),analyses);</span><br><span class="line">                    <span class="keyword">if</span>(!str.contains(string))</span><br><span class="line">                        str+=string;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!list1.get(i).getHead().equals(edge.getHead()))&#123;</span><br><span class="line">                String string = Fo.follow(list,list1.get(i),analyses);</span><br><span class="line">                <span class="keyword">if</span>(!str.contains(string))</span><br><span class="line">                    str+=string;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        All.node = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        ArrayList&lt;Edge&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String fuhao = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入文法G[E]:&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            String[] arr = &#123;&#125;;</span><br><span class="line">            arr = in.next().split(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(arr[<span class="number">0</span>].equals(<span class="string">&quot;#&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">            Edge edge = <span class="keyword">new</span> Edge(arr[<span class="number">1</span>].length());</span><br><span class="line">            edge.setHead(arr[<span class="number">0</span>]);</span><br><span class="line">            edge.setTail(arr[<span class="number">1</span>]);</span><br><span class="line">            list.add(edge);</span><br><span class="line">            <span class="keyword">if</span>(!All.node.contains(arr[<span class="number">0</span>]))</span><br><span class="line">                All.node+=arr[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入符号串(末尾以$结束)：&quot;</span>);</span><br><span class="line">        fuhao = in.next();</span><br><span class="line">        All.len = list.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;All.len;i++)&#123;</span><br><span class="line">            list.get(i).setFirst(Fi.first(list,list.get(i)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Analyse&gt; alists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;All.node.length();j++)&#123;</span><br><span class="line">            Analyse analyse = <span class="keyword">new</span> Analyse();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;All.len;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(list.get(i).getHead().charAt(<span class="number">0</span>)==All.node.charAt(j))&#123;</span><br><span class="line">                    analyse.setNode(list.get(i).getHead());</span><br><span class="line">                    analyse.setFirst(list.get(i).getFirst());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            alists.add(analyse);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;All.len;i++)&#123;</span><br><span class="line">            String str = Fo.follow(list,list.get(i),alists);</span><br><span class="line">            String a = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;str.length();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!a.contains(String.valueOf(str.charAt(j))))&#123;</span><br><span class="line">                    a+=str.charAt(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            list.get(i).setFollow(a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;All.node.length();j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;All.len;i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(list.get(i).getHead().charAt(<span class="number">0</span>)==All.node.charAt(j))&#123;</span><br><span class="line">                    alists.get(j).setFollw(list.get(i).getFollow());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;alists.size();i++)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;FIRST(&quot;</span>+alists.get(i).getNode()+<span class="string">&quot;):&quot;</span>+alists.get(i).getFirst()+<span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;FOLLOW(&quot;</span>+alists.get(i).getNode()+<span class="string">&quot;):&quot;</span>+alists.get(i).getFollw());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] M = <span class="keyword">new</span> <span class="keyword">int</span>[All.node.length()][<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;All.len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!list.get(i).getTail().equals(<span class="string">&quot;&amp;&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">if</span>(All.sign.contains(String.valueOf(list.get(i).getTail().charAt(<span class="number">0</span>))))&#123;</span><br><span class="line">                    M[All.node.indexOf(list.get(i).getHead())][All.sign.indexOf(list.get(i).getTail().charAt(<span class="number">0</span>))] = i+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; search.findFi(alists, list.get(i).getTail().substring(<span class="number">0</span>, <span class="number">1</span>)).length(); j++) &#123;</span><br><span class="line">                        M[All.node.indexOf(list.get(i).getHead())][All.sign.indexOf(search.findFi(alists, list.get(i).getTail().substring(<span class="number">0</span>, <span class="number">1</span>)).charAt(j))] = i+<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;list.get(i).getFollow().length();j++)&#123;</span><br><span class="line">                    M[All.node.indexOf(list.get(i).getHead())][All.sign.indexOf(list.get(i).getFollow().charAt(j))]= i+<span class="number">1</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n\t预测分析表：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;\ti\t+\t*\t(\t)\t$\t&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;All.node.length();i++)&#123;</span><br><span class="line">            System.out.print(All.node.charAt(i)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)&#123;</span><br><span class="line">                System.out.print(M[i][j]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(<span class="string">&quot;$&quot;</span>);</span><br><span class="line">        stack.push(list.get(<span class="number">0</span>).getHead());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sem =<span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span>+All.space(<span class="number">10</span>)+<span class="string">&quot;栈\t\t输入\t\t输出&quot;</span>);</span><br><span class="line">        String str1=<span class="string">&quot;&quot;</span>,str2=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!str1.equals(<span class="string">&quot;&quot;</span>))</span><br><span class="line">                System.out.println(All.space(<span class="number">12</span>-stack.toString().replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>).length())+stack.toString().replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)+All.space(<span class="number">12</span>-fuhao.length())+fuhao+<span class="string">&quot;\t\t&quot;</span>+str1+<span class="string">&quot;-&gt;&quot;</span>+str2);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.println(All.space(<span class="number">12</span>-stack.toString().replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>).length())+stack.toString().replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)+All.space(<span class="number">12</span>-fuhao.length())+fuhao+<span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line">            str1=<span class="string">&quot;&quot;</span>;str2=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(stack.peek().equals(<span class="string">&quot;$&quot;</span>)&amp;&amp;fuhao.charAt(sem)==<span class="string">&#x27;$&#x27;</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;\n分析成功！&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(stack.peek().equals(String.valueOf(fuhao.charAt(sem))))&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                fuhao = fuhao.substring(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> i = M[All.node.indexOf(stack.pop())][All.sign.indexOf(fuhao.charAt(sem))];</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span>)    &#123; System.out.println(<span class="string">&quot;出错了！&quot;</span>);<span class="keyword">break</span>;&#125;</span><br><span class="line">                str1 = list.get(i-<span class="number">1</span>).getHead();</span><br><span class="line">                str2 = list.get(i-<span class="number">1</span>).getTail();</span><br><span class="line">                <span class="keyword">for</span>(i=str2.length()-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(str2.charAt(i)!=<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">                        stack.push(String.valueOf(str2.charAt(i)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归下降分析子程序</title>
      <link href="/262016/"/>
      <url>/262016/</url>
      
        <content type="html"><![CDATA[<p><strong>基本思想：</strong><br>从开始符号E作为根节点出发，按顺序尝试该非终结符号的所有规则<br>分析树从上到下，从左到右的构建过程<br><span id="more"></span><br>基本递归调用分析过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void A( )&#123;</span><br><span class="line">    选择一条A的产生式: A→X1X2…Xk;</span><br><span class="line">    for( i =1 to k)&#123;</span><br><span class="line">        if(Xi 是一个非终结符号)&#123;</span><br><span class="line">            调用过程Xi();</span><br><span class="line">        else if (Xi等于当前的输入符号a)</span><br><span class="line">            符号a识别成功，读入下一个输入符号;</span><br><span class="line">        else /*该规则无法正确识别，产生一个错误;*/</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-算法过程"><a href="#1-算法过程" class="headerlink" title="1.算法过程"></a>1.算法过程</h3><p>1.1 消除文法左递归（手动）。<br>1.2 递归下降子程序方法<br>　通过递归下降的方式来对句子进行分析。<br>　若能够接收一个完全的初始字符并且所有的串全部被读入，则算作合法。否则为不合法。　</p><h3 id="2-测试"><a href="#2-测试" class="headerlink" title="2.测试"></a>2.测试</h3><p><em>文法为</em>：</p><blockquote><p>G[E]:<br>E→E+T | T<br>T→T*F | F<br>F→( E ) | i</p></blockquote><p>因为包含左递归，故应先消去。<br><em>运行结果：</em><br><img src="http://ww3.sinaimg.cn/large/b12dc344gw1fb4a6305p6j20ja0a0gmi.jpg" alt="输出"></p><h3 id="3-数据结构"><a href="#3-数据结构" class="headerlink" title="3.数据结构"></a>3.数据结构</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100</span></span><br><span class="line"><span class="keyword">char</span> Buffer[MAX]; <span class="comment">//保存输入的符号串</span></span><br></pre></td></tr></table></figure><h3 id="4-源代码"><a href="#4-源代码" class="headerlink" title="4.源代码"></a>4.源代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> Buffer[MAX];</span><br><span class="line"><span class="keyword">int</span> tail;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">E</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">A</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">T</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">B</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">F</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">E→TE’           E</span></span><br><span class="line"><span class="comment">E’ →+TE’/ ε     A</span></span><br><span class="line"><span class="comment">T→FT’           T</span></span><br><span class="line"><span class="comment">T’ →*FT’/ ε     B</span></span><br><span class="line"><span class="comment">F→（E）/ i      F</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    tail = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,Buffer);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">E</span>() &amp;&amp; <span class="built_in">strlen</span>(Buffer) == tail)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Yes!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入判断的次数：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入%d个符号串：\n&quot;</span>,N);</span><br><span class="line">    <span class="keyword">while</span>(N--) <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">E</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">    flag = flag &amp;&amp; <span class="built_in">T</span>();</span><br><span class="line">    flag = flag &amp;&amp; <span class="built_in">A</span>();</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Buffer[tail] == <span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">        tail ++;</span><br><span class="line">        flag = flag &amp;&amp; <span class="built_in">F</span>();</span><br><span class="line">        flag = flag &amp;&amp; <span class="built_in">B</span>();</span><br><span class="line">        flag = flag &amp;&amp; <span class="built_in">A</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">T</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">    flag = flag &amp;&amp; <span class="built_in">F</span>();</span><br><span class="line">    flag = flag &amp;&amp; <span class="built_in">B</span>();</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">B</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Buffer[tail] == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">        tail ++;</span><br><span class="line">        flag = flag &amp;&amp; <span class="built_in">F</span>();</span><br><span class="line">        flag = flag &amp;&amp; <span class="built_in">B</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">F</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Buffer[tail] == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">        tail ++;</span><br><span class="line">        flag = flag &amp;&amp; <span class="built_in">E</span>();</span><br><span class="line">        <span class="keyword">if</span>(Buffer[tail] != <span class="string">&#x27;)&#x27;</span>) flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> tail ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(Buffer[tail] == <span class="string">&#x27;i&#x27;</span>)&#123;</span><br><span class="line">        tail ++;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非确定自动机的确定化与最小化</title>
      <link href="/252016/"/>
      <url>/252016/</url>
      
        <content type="html"><![CDATA[<p>这个实验比较难，我网上找了好多资料才理解透，尝试用Java实现了一下，时间复杂度没有把控太好。<br><span id="more"></span></p><h3 id="1-算法流程"><a href="#1-算法流程" class="headerlink" title="1.算法流程"></a>1.算法流程</h3><p><strong>1.1 确定输入为NFA或DFA</strong><br>（1）遍历自动机，若条件为ε，则跳出循环，执行（3），否则执行（2）<br>（2）若存在两条边初状态和条件一样，则跳出循环，执行（3），否则执行（4）<br>（3）该自动机为DFA<br>（4）该自动机为NFA<br><strong>1.2 NFA转换为DFA（子集法确定化）</strong><br>（1）求初态闭包ε-closure I，求la（a为转换条件），求得的Ia求闭包。<br>（2）若不再有新的状态集产生，执行（4），否则执行（3）<br>（3）把Ia作为下一条转换边的初态，求Ia及闭包，执行（2）<br>（4）重命名所有状态集，执行（5）<br>（5）输出DFA<br><strong>1.3 最小化DFA（求异法）</strong><br>（1）把状态分为接受状态和非接受状态两个集合，加入∏。<br>（2）遍历∏中所有集合，对于∏中的某一个集合，分为若干个子集k = ka∩kb∩kc……。遍历转换条件a，把k中的子集ka的Ia加入新的集合N，若N不是∏中集合的子集，则执行（3），否则（4）<br>（3）遍历k，把k中子集的Ia不为k中子集的该子集分出去形成新的集合Knew，加入∏，执行（2）。<br>（4）重命名∏中子集<br>（5）输出最小化DFA。</p><h3 id="2-数据结构"><a href="#2-数据结构" class="headerlink" title="2.数据结构"></a>2.数据结构</h3><p>NFA转换边<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String head;</span><br><span class="line">    <span class="keyword">private</span> String change;</span><br><span class="line">    <span class="keyword">private</span> String last;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>DFA转换边<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chain</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String ltab;</span><br><span class="line">    <span class="keyword">private</span> String[] jihe =<span class="keyword">new</span> String[<span class="number">2</span>];</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h3><p><strong>输入</strong></p><p><img src="http://ww3.sinaimg.cn/large/b12dc344gw1fb3gw0f3pvj20e10ekwfa.jpg" alt="输入"></p><p><strong>输出</strong></p><p><img src="http://ww1.sinaimg.cn/large/b12dc344gw1fb3h0dmajij20em0h5t9w.jpg" alt="NFA"></p><p><img src="http://ww3.sinaimg.cn/large/b12dc344gw1fb3gxo70qcj20el0ap3zc.jpg" alt="DFA"></p><h3 id="4-源程序"><a href="#4-源程序" class="headerlink" title="4.源程序"></a>4.源程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//静态全局变量</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">All</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> String NODE;</span><br><span class="line">    <span class="keyword">static</span> String CHANGE;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">SPACE</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            str+=<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//NFA转换边</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String head;</span><br><span class="line">    <span class="keyword">private</span> String change;</span><br><span class="line">    <span class="keyword">private</span> String last;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHead</span><span class="params">(String head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.head = head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getChange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> change;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChange</span><span class="params">(String change)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.change = change;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLast</span><span class="params">(String last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//DFA转换边</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chain</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String ltab;</span><br><span class="line">    <span class="keyword">private</span> String[] jihe =<span class="keyword">new</span> String[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Chain(String ltab)&#123;</span><br><span class="line">        <span class="keyword">this</span>.ltab = ltab;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;jihe.length;i++)&#123;</span><br><span class="line">            jihe[i]=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLtab</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ltab;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLtab</span><span class="params">(String ltab)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ltab += ltab;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanLtab</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ltab = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cleanJihe</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jihe[k] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJihe</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jihe[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJihe</span><span class="params">(String jihe,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jihe[k] += jihe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求闭包</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Closure</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Closure</span><span class="params">(<span class="keyword">char</span> ch, Chain it, ArrayList&lt;Edge&gt; list,<span class="keyword">int</span> sign)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k;</span><br><span class="line">        <span class="keyword">int</span> N = list.size();</span><br><span class="line">        <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;N;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(list.get(k).getHead().equals(String.valueOf(ch)))</span><br><span class="line">                <span class="keyword">if</span>(list.get(k).getChange().equals(<span class="string">&quot;*&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(sign==-<span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!it.getLtab().contains(list.get(k).getLast()))</span><br><span class="line">                            it.setLtab(list.get(k).getLast());</span><br><span class="line">                        <span class="keyword">new</span> Closure(list.get(k).getLast().charAt(<span class="number">0</span>), it, list, sign); <span class="comment">//遍历每一个结点</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span>(!it.getJihe(sign).contains(list.get(k).getLast()))</span><br><span class="line">                            it.setJihe(list.get(k).getLast(),sign);</span><br><span class="line">                        <span class="keyword">new</span> Closure(list.get(k).getLast().charAt(<span class="number">0</span>), it, list, sign);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求状态转换集</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Move</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Move</span><span class="params">(Chain it, <span class="keyword">int</span> m,ArrayList&lt;Edge&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = it.getLtab().length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;list.size();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(list.get(j).getChange().equals(All.CHANGE.substring(m,m+<span class="number">1</span>))&amp;&amp;list.get(j).getHead().charAt(<span class="number">0</span>)==it.getLtab().charAt(i))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!it.getJihe(m).contains(list.get(j).getLast()))&#123;</span><br><span class="line">                        it.setJihe(list.get(j).getLast(),m);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Output</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Output</span><span class="params">(<span class="keyword">int</span> len,<span class="keyword">int</span> high,ArrayList&lt;Chain&gt; chains)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;      I   &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;   I&quot;</span>+All.CHANGE.charAt(i)+<span class="string">&quot;   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n-------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;high;i++)&#123;</span><br><span class="line">            System.out.print(All.SPACE(<span class="number">7</span>-chains.get(i).getLtab().length())+chains.get(i).getLtab());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">                System.out.print(All.SPACE(<span class="number">8</span>-chains.get(i).getJihe(j).length())+chains.get(i).getJihe(j));</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N;      <span class="comment">//状态边条数</span></span><br><span class="line">        <span class="keyword">int</span> isnot = <span class="number">0</span>;</span><br><span class="line">        All.NODE=<span class="string">&quot;&quot;</span>;All.CHANGE=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        String endnode;     <span class="comment">//储存终结结点</span></span><br><span class="line">        ArrayList&lt;Edge&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Chain&gt; chains = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入NFA各边信息（初态 条件[空为*] 终态），以#结束：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            Edge edge = <span class="keyword">new</span> Edge();</span><br><span class="line">            edge.setHead(in.next());</span><br><span class="line">            <span class="keyword">if</span> (edge.getHead().equals(<span class="string">&quot;#&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">            edge.setChange(in.next());</span><br><span class="line">            edge.setLast(in.next());</span><br><span class="line">            list.add(edge);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//System.out.println(list.get(0).getHead());</span></span><br><span class="line">        N = list.size();</span><br><span class="line">        <span class="comment">//判断NFA和DFA</span></span><br><span class="line">        A:</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;N;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(list.get(j).getChange().equals(<span class="string">&quot;*&quot;</span>))&#123;</span><br><span class="line">                    isnot = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span> A;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(list.get(i).getHead().equals(list.get(j).getHead())&amp;&amp;list.get(i).getChange().equals(list.get(j).getChange()))&#123;</span><br><span class="line">                    isnot = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span> A;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(isnot == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isnot == <span class="number">1</span>) System.out.println(<span class="string">&quot;该自动机为NFA&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.println(<span class="string">&quot;该自动机为DFA&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//所有状态结点储存在All.NODE，转换条件储存在All.CHANGE</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!All.NODE.contains(list.get(i).getHead()))   All.NODE=All.NODE+list.get(i).getHead();</span><br><span class="line">            <span class="keyword">if</span>(!All.NODE.contains(list.get(i).getLast()))   All.NODE=All.NODE+list.get(i).getLast();</span><br><span class="line">            <span class="keyword">if</span>(!All.CHANGE.contains(list.get(i).getChange())&amp;&amp;!list.get(i).getChange().equals(<span class="string">&quot;*&quot;</span>))   All.CHANGE+=list.get(i).getChange();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = All.CHANGE.length();      <span class="comment">//len为转换条件的个数</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n终态是：&quot;</span>); endnode = in.next();</span><br><span class="line"></span><br><span class="line">        Chain chain = <span class="keyword">new</span> Chain(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        chain.setLtab(list.get(<span class="number">0</span>).getHead());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Closure(list.get(<span class="number">0</span>).getHead().charAt(<span class="number">0</span>),chain,list,-<span class="number">1</span>); <span class="comment">//求初始闭包e-closure</span></span><br><span class="line">        chains.add(chain);</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//求DFA</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;flag;j++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;len;m++)&#123;</span><br><span class="line">                <span class="keyword">new</span> Move(chains.get(j),m,list);         <span class="comment">//求F(I,a) I经过a边到达的状态</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>;n&lt;chains.get(j).getJihe(m).length();n++)&#123;</span><br><span class="line">                    <span class="keyword">new</span> Closure(chains.get(j).getJihe(m).charAt(n),chains.get(j),list,m);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>;n&lt;len;n++)&#123;</span><br><span class="line">                <span class="keyword">boolean</span> sign = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;flag;m++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(chains.get(m).getLtab().equals(chains.get(j).getJihe(n)))    &#123;sign=<span class="keyword">false</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(sign&amp;&amp;chains.get(j).getJihe(n).length()!=<span class="number">0</span>)&#123;</span><br><span class="line">                    flag++;</span><br><span class="line">                    chains.add(<span class="keyword">new</span> Chain(chains.get(j).getJihe(n)));&#125;</span><br><span class="line">                <span class="comment">//System.out.println(flag);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;状态转换矩阵如下：&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Output(len,chains.size(),chains);</span><br><span class="line"></span><br><span class="line">        String end = <span class="string">&quot;&quot;</span>,start = <span class="string">&quot;&quot;</span>;        <span class="comment">//end终结结点，start非终结结点</span></span><br><span class="line">        All.NODE = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n重命名：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;flag;j++)&#123;</span><br><span class="line">            String temp = chains.get(j).getLtab();</span><br><span class="line">            <span class="keyword">char</span> a = (<span class="keyword">char</span>)(<span class="number">65</span>+j);</span><br><span class="line">            chains.get(j).cleanLtab();</span><br><span class="line">            chains.get(j).setLtab(String.valueOf(a));</span><br><span class="line">            All.NODE+=String.valueOf(a);</span><br><span class="line"></span><br><span class="line">            System.out.println(All.SPACE(<span class="number">8</span>-temp.length())+<span class="string">&quot;&#123;&quot;</span>+temp+<span class="string">&quot;&#125; = &quot;</span>+String.valueOf(a));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;endnode.length();k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(temp.contains(endnode.substring(k,k+<span class="number">1</span>)))&#123;</span><br><span class="line">                    end += String.valueOf(a);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;flag;k++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;len;m++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(temp.equals(chains.get(k).getJihe(m)))&#123;</span><br><span class="line">                        chains.get(k).cleanJihe(m);</span><br><span class="line">                        chains.get(k).setJihe(String.valueOf(a),m);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;All.NODE.length();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;end.length();j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (All.NODE.charAt(i)!=end.charAt(j)) &#123;</span><br><span class="line">                    start+=All.NODE.charAt(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n初始DFA如下&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Output(len,flag,chains);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//DFA最小化</span></span><br><span class="line">        ArrayList&lt;String&gt; status = <span class="keyword">new</span> ArrayList&lt;&gt;();       <span class="comment">//储存集合</span></span><br><span class="line">        status.add(start);status.add(end);      <span class="comment">//初始为两个组终结和非终结</span></span><br><span class="line"></span><br><span class="line">        OK:</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;status.size();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">                String L1 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">boolean</span> sign = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//考察status中某一集合经过a条件到达的点形成的集合是否在原status中，sign为true则表明不在</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;status.get(i).length();k++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>;n&lt;flag;n++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(chains.get(n).getLtab().charAt(<span class="number">0</span>)==status.get(i).charAt(k))&#123;</span><br><span class="line">                            <span class="keyword">if</span>(!L1.contains(chains.get(n).getJihe(j)))</span><br><span class="line">                                L1+=chains.get(n).getJihe(j);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;status.size();m++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (status.get(m).contains(L1))&#123;</span><br><span class="line">                        sign=<span class="keyword">false</span>;<span class="keyword">break</span>;   <span class="comment">//如果存在，则进行下一轮循环</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//集合分割成更小的集合</span></span><br><span class="line">                <span class="keyword">if</span>(sign)&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;status.get(i).length(); k++) &#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>;n&lt;flag;n++)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(chains.get(n).getLtab().charAt(<span class="number">0</span>)==status.get(i).charAt(k))&#123;</span><br><span class="line">                                <span class="keyword">if</span> (!status.get(i).contains(chains.get(n).getJihe(j))) &#123;</span><br><span class="line">                                    String str = chains.get(n).getLtab();</span><br><span class="line">                                    status.add(str);</span><br><span class="line">                                    String newstr = status.get(i).replaceAll(str,<span class="string">&quot;&quot;</span>);</span><br><span class="line">                                    status.set(i,newstr);</span><br><span class="line">                                    i=-<span class="number">1</span>;</span><br><span class="line">                                    <span class="keyword">continue</span> OK;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(status.get(0));</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\n-------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;DFA最小化划分集合为：&quot;</span>);</span><br><span class="line">        All.NODE = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        ArrayList&lt;Chain&gt; newchains = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;status.size();i++)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot; &#123;&quot;</span>+status.get(i)+<span class="string">&quot;&#125; &quot;</span>);</span><br><span class="line">            Chain chain1 = <span class="keyword">new</span> Chain(String.valueOf((<span class="keyword">char</span>)(<span class="number">65</span>+i)));</span><br><span class="line">            newchains.add(chain1);</span><br><span class="line">            <span class="keyword">if</span>(status.get(i).contains(end))&#123;</span><br><span class="line">                All.NODE+=String.valueOf((<span class="keyword">char</span>)(<span class="number">65</span>+i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//System.exit(0);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\n-------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;集合重命名：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;status.size();i++)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot; &#123;&quot;</span>+status.get(i)+<span class="string">&quot;&#125; = &quot;</span>+newchains.get(i).getLtab());</span><br><span class="line">            END:</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;chains.size();k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(chains.get(k).getLtab().charAt(<span class="number">0</span>)==status.get(i).charAt(<span class="number">0</span>))&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;status.size();m++)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(status.get(m).contains(chains.get(k).getJihe(j)))&#123;</span><br><span class="line">                                newchains.get(i).setJihe(newchains.get(m).getLtab(),j);</span><br><span class="line">                                <span class="keyword">continue</span> END;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n-------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;最小化DFA为：&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Output(len,newchains.size(),newchains);</span><br><span class="line">        System.out.println(<span class="string">&quot;终结符号为： &quot;</span>+ All.NODE);</span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 利用管道实现父子进程之间的通信</title>
      <link href="/102016/"/>
      <url>/102016/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这学期操作系统课程实践的实验内容，相对比较容易。主要是掌握无名管道的用法和利用信号量实现进程间资源的互斥使用。</p></blockquote> <span id="more"></span><h4 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h4><p>　　由父进程创建一个管道，然后再创建3个子进程，并由这三个子进程利用管道与父进程之间进行通信：子进程发送消息，父进程等三个子进程全部发送完消息后再接受消息。通信的具体内容可根据自己的需要随意设计，要求能试验阻塞型读写过程中的各种情况，并能要实现进程间对管道的互斥访问。运行程序，观察各种情况下，进程实际读写的字节数以及进程阻塞唤醒的情况。</p><h4 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h4><p><span style="background: #3B3B3B;color: white;">管道</span>：管道是一种把两个进程之间的标准输入和标准输出连接起来的机制，从而提供一种让多个进程间通信的方法，当进程创建管道时，每次都需要提供两个文件描述符来操作管道。其中一个对管道进行写操作，另一个对管道进行读操作。对管道的读写与一般的IO系统函数一致，使用write()函数写入数据，使用read()读出数据。</p><p><strong>管道分无名管道和有名管道</strong></p><p style="color: white;background: #3B3B3B;">1. 无名管道主要用于父进程与子进程之间，或者两个兄弟进程之间，通过int pipe(fd[2])创建。fd[0]控制读端，fd[1]控制写端。<br/><br>2. 命名管道也被称为FIFO文件，是一种特殊类型的文件，它在文件系统中以文件名的形式存在，FIFO代表先进先出。FIFO可以用在非亲缘关系的进程间的通信,而它的真正用途是在服务器和客户端之间。FIFO管道是先调用mkfifo创建,然后再用open打开得到fd来使用。<br><br>3. 管道都是半双工的，是一个单向数据流。<br></p><p><span style="background: #3B3B3B;color: white;">进程</span>：一个进程，包括代码、数据和分配给进程的资源。<br>　　fork（）函数通过系统调用创建一个与原来进程几乎完全相同的进程，也就是两个进程可以做完全相同的事，但如果初始参数或者传入的变量不同，两个进程也可以做不同的事。一个进程调用fork（）函数后，系统先给新的进程分配资源，例如存储数据和代码的空间。然后把原来的进程的所有值都复制到新的新进程中，只有少数值与原来的进程的值不同。相当于克隆了一个自己。</p><p>fork被调用一次，却能够返回两次，它可能有三种不同的返回值：</p><p style="color: white;background: #3B3B3B;">1. 在父进程中，fork返回新创建子进程的进程ID；<br/><br>2. 在子进程中，fork返回0；<br/><br>3. 如果出现错误，fork返回一个负值；</p><p>在fork函数执行完毕后，如果创建新进程成功，则出现两个进程，一个是子进程，一个是父进程。在子进程中，fork函数返回0，在父进程中，fork返回新创建子进程的进程ID。我们可以通过fork返回的值来判断当前进程是子进程还是父进程。</p><p><span style="background: #3B3B3B;color: white;">信号量</span>:信号量的使用主要是用来保护共享资源，使得资源在一个时刻只有一个进程（线程）<br>所拥有。<br>信号量的值为正的时候，说明它空闲。所测试的线程可以锁定而使用它。若为0，说明<br>它被占用，测试的线程要进入睡眠队列中，等待被唤醒。</p><p>信号量分内核信号量和用户态进程使用的信号量，用户态进程使用的信号量又分POSIX信号量和SYSTEM V信号量。</p><p><strong>POSIX信号量又分为有名信号量和无名信号量。</strong></p><ol><li>有名信号量，其值保存在文件中, 所以它可以用于线程也可以用于进程间的同步，通过<code>sem_t *sem_open(const char *name, int oflag, mode_t mode, unsigned int value);</code>创建；</li><li>无名信号量，其值保存在内存中，通过<code>int sem_init(sem_t *sem, int pshared, unsigned int value)</code>创建;。</li><li>使用方法可参考：</li></ol><h4 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd[<span class="number">2</span>],n;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE];</span><br><span class="line">    <span class="keyword">sem_t</span> scanwrite;</span><br><span class="line">    sem_init(&amp;scanwrite,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(pipe(fd) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;create Pipe Error %s\n&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((pid = fork()) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;create Fork Error %s\n&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">        close(fd[<span class="number">0</span>]);</span><br><span class="line">        sem_wait(&amp;scanwrite);</span><br><span class="line">        write(fd[<span class="number">1</span>],<span class="string">&quot;I&#x27;m big brother.\n&quot;</span>,<span class="number">17</span>);</span><br><span class="line">        sem_post(&amp;scanwrite);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((pid = fork()) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;create Fork Error %s\n&quot;</span>, strerror(errno));</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">            close(fd[<span class="number">0</span>]);</span><br><span class="line">            sem_wait(&amp;scanwrite);</span><br><span class="line">            write(fd[<span class="number">1</span>],<span class="string">&quot;I&#x27;m second brother.\n&quot;</span>,<span class="number">20</span>);</span><br><span class="line">            sem_post(&amp;scanwrite);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>((pid = fork()) &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;create Fork Error %s\n&quot;</span>, strerror(errno));</span><br><span class="line">                <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">                close(fd[<span class="number">0</span>]);</span><br><span class="line">                sem_wait(&amp;scanwrite);</span><br><span class="line">                write(fd[<span class="number">1</span>],<span class="string">&quot;I&#x27;m last brother.\n&quot;</span>,<span class="number">18</span>);</span><br><span class="line">                sem_post(&amp;scanwrite);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                wait(<span class="number">0</span>);</span><br><span class="line">                wait(<span class="number">0</span>);</span><br><span class="line">                wait(<span class="number">0</span>);</span><br><span class="line">                close(fd[<span class="number">1</span>]);</span><br><span class="line">                n = read(fd[<span class="number">0</span>],buf,MAXSIZE);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d bytes read:\n%s&quot;</span>,n,buf);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>shell输入指令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcc communication.c -o com -lpthread</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./com</span></span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">55 bytes read:</span><br><span class="line">I&#x27;m big brother.</span><br><span class="line">I&#x27;m second brother.</span><br><span class="line">I&#x27;m last brother.</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux fork()与vfork()的区别</title>
      <link href="/082016/"/>
      <url>/082016/</url>
      
        <content type="html"><![CDATA[<p><strong>为什么会有vfork</strong></p><blockquote><p>为什么会有vfork，因为以前的fork 很傻，它创建一个子进程时，将会创建一个新的地址空间，并且拷贝父进程的资源，而往往在子进程中会执行exec调用，这样，前面的拷贝工作就是白费力气了，这种情况下，聪明的人就想出了vfork，它产生的子进程刚开始暂时与父进程共享地址空间（其实就是线程的概念了），因为这时候子进程在父进程的地址空间中 运行，所以子进程不能进行写操作，并且在儿子 霸占”着老子的房子时候，要委屈老子一下了，让他在外面歇着（阻塞），一旦儿子执行了exec或者exit后，相当于儿子买了自己的 房子了，这时候就相当于分家了。</p></blockquote> <span id="more"></span><p>fork()与vfock()都是创建一个进程，那他们有什么区别呢？总结有以下三点区别： </p><p style="color: white;background: #3B3B3B;"> 1.  fork ( )：子进程拷贝父进程的数据段与代码段 。<br>　vfork( )：子进程与父进程共享数据段 。<br> 2.  fork ( )：父子进程的执行次序不确定 。<br> 　vfork( )：保证子进程先运行，在调用exec 或exit 之前与父进程数据是共享的,在它调用exec或exit 之后父进程才可能被调度运行。<br> 3.  vfork() ：保证子进程先运行，在她调用exec 或exit 之后父进程才可能被调度运行。如果在调用这两个函数之前子进程依赖于父进程的进一步动作，则会导致死锁。</p><p><strong>下面通过几个例子说明：</strong></p><p>fork( )创建子进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">pid_t</span> pid;  </span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;  </span><br><span class="line">    pid = fork();  </span><br><span class="line">    <span class="keyword">if</span>(pid&lt;<span class="number">0</span>)  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error in fork!\n&quot;</span>);  </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        cnt++;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;cnt=%d\n&quot;</span>,cnt);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I am the child process,ID is %d\n&quot;</span>,getpid());  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        cnt++;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;cnt=%d\n&quot;</span>,cnt);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I am the parent process,ID is %d\n&quot;</span>,getpid());  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cnt=1  </span><br><span class="line">I am the child process,ID is 5077  </span><br><span class="line">cnt=1  </span><br><span class="line">I am the parent process,ID is 5076</span><br></pre></td></tr></table></figure><br>为什么不是2 呢？因为我们一次强调fork( )函数子进程拷贝父进程的数据段代码段，所以<code>cnt++;</code>将被父子进程各执行一次，但是子进程里的count这个数据段是从父进程那复制过来的，执行时使自己的数据段里面的count+1，同样父进程执行时使自己的数据段里面的count+1， 他们互不影响，与是便出现了如上的结果。</p><p>如果将上面程序中的fork（）改成vfork（），运行结果是什么样子的呢？ </p><p>运行结果：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cnt=1  </span><br><span class="line">I am the child process,ID is 4711  </span><br><span class="line">cnt=1  </span><br><span class="line">I am the parent process,ID is 4710  </span><br><span class="line">段错误  </span><br></pre></td></tr></table></figure></p><p>本来vfock（）是共享数据段的，结果应该是2，为什么不是预想的2呢？先看一个知识点：vfork 和fork 之间的另一个区别是：vfork 保证子进程先运行，在她调用exec或exit之后父进程才可能被调度运行。如果在调用这两个函数之前子进程依赖于父进程的进一步动作，则会导致<span style="background: #3B3B3B;color: white">死锁</span>。</p><p style="background: #3B3B3B;color: white;">vfork死锁是因为子进程先执行，但是在子进程需要依赖父进程进一步动作才能继续执行的情况下子进程会一直等待父进程执行，而父进程会一直等待子进程执行。参考《UNIX环境高级编程》P187。</p><p>改成下面的程序就行了:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">pid_t</span> pid;  </span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;  </span><br><span class="line">    pid = vfork();  </span><br><span class="line">    <span class="keyword">if</span>(pid&lt;<span class="number">0</span>)  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error in fork!\n&quot;</span>);  </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        cnt++;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;cnt=%d\n&quot;</span>,cnt);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I am the child process,ID is %d\n&quot;</span>,getpid());  </span><br><span class="line">       _exit(<span class="number">0</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        cnt++;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;cnt=%d\n&quot;</span>,cnt);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I am the parent process,ID is %d\n&quot;</span>,getpid());  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这次有了<code>_exit(0)</code>，子进程能顺利退出，父进程才得以执行。</p><p>运行结果：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cnt=1  </span><br><span class="line">I am the child process,ID is 4711  </span><br><span class="line">cnt=2  </span><br><span class="line">I am the parent process,ID is 4710  </span><br></pre></td></tr></table></figure></p><p>这次就和我们预料的一样了，而且没出现错误。</p><p>参考：<a href="http://blog.csdn.net/jianchi88/article/details/6985326">Lotte’s Embedded Zone</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/072016/"/>
      <url>/072016/</url>
      
        <content type="html"><![CDATA[<h1 id="你好，世界！"><a href="#你好，世界！" class="headerlink" title="你好，世界！"></a>你好，世界！</h1><blockquote><p>你好，欢迎来到我的个人博客！</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
